<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A nodepool is a set of nodes dedicated for a given user's compute needs.
 * This compute will typically be consumed by runners and in the future other objects
 * like UI modules may be assigned to node pools.
 *
 * Generated from protobuf message <code>clarifai.api.Nodepool</code>
 */
class Nodepool extends \Google\Protobuf\Internal\Message
{
    /**
     * The user defined ID of the nodepool.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * The user/org that this nodepool belongs to.
     *
     * Generated from protobuf field <code>string user_id = 2;</code>
     */
    protected $user_id = '';
    /**
     * Which cloud region this nodepool is within.
     *
     * Generated from protobuf field <code>.clarifai.api.CloudRegion cloud_region = 3;</code>
     */
    protected $cloud_region = null;
    /**
     * Generated from protobuf field <code>repeated .clarifai.api.Nodepool.CapacityType capacity_types = 4;</code>
     */
    private $capacity_types;
    /**
     *&#47;///////////////////////////////////
     * The instance types that will be available in this pool of nodes.
     * Clarifai offers multiple different choices that combine cpu cores, memory and accelerator.
     *
     * Generated from protobuf field <code>repeated string instance_types = 8;</code>
     */
    private $instance_types;
    /**
     * Minimum number of instances in this nodepool. This allows the nodeool to scale down to this
     * amount. A nodepool needs a minimum of 1 instance.
     *
     * Generated from protobuf field <code>uint32 min_instances = 9;</code>
     */
    protected $min_instances = 0;
    /**
     * An upper limit on the number of instances in this nodepool. This allows the nodepool to scale
     * up to this amount.
     *
     * Generated from protobuf field <code>uint32 max_instances = 10;</code>
     */
    protected $max_instances = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           The user defined ID of the nodepool.
     *     @type string $user_id
     *           The user/org that this nodepool belongs to.
     *     @type \Clarifai\Api\CloudRegion $cloud_region
     *           Which cloud region this nodepool is within.
     *     @type array<int>|\Google\Protobuf\Internal\RepeatedField $capacity_types
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $instance_types
     *          &#47;///////////////////////////////////
     *           The instance types that will be available in this pool of nodes.
     *           Clarifai offers multiple different choices that combine cpu cores, memory and accelerator.
     *     @type int $min_instances
     *           Minimum number of instances in this nodepool. This allows the nodeool to scale down to this
     *           amount. A nodepool needs a minimum of 1 instance.
     *     @type int $max_instances
     *           An upper limit on the number of instances in this nodepool. This allows the nodepool to scale
     *           up to this amount.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * The user defined ID of the nodepool.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * The user defined ID of the nodepool.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * The user/org that this nodepool belongs to.
     *
     * Generated from protobuf field <code>string user_id = 2;</code>
     * @return string
     */
    public function getUserId()
    {
        return $this->user_id;
    }

    /**
     * The user/org that this nodepool belongs to.
     *
     * Generated from protobuf field <code>string user_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setUserId($var)
    {
        GPBUtil::checkString($var, True);
        $this->user_id = $var;

        return $this;
    }

    /**
     * Which cloud region this nodepool is within.
     *
     * Generated from protobuf field <code>.clarifai.api.CloudRegion cloud_region = 3;</code>
     * @return \Clarifai\Api\CloudRegion|null
     */
    public function getCloudRegion()
    {
        return $this->cloud_region;
    }

    public function hasCloudRegion()
    {
        return isset($this->cloud_region);
    }

    public function clearCloudRegion()
    {
        unset($this->cloud_region);
    }

    /**
     * Which cloud region this nodepool is within.
     *
     * Generated from protobuf field <code>.clarifai.api.CloudRegion cloud_region = 3;</code>
     * @param \Clarifai\Api\CloudRegion $var
     * @return $this
     */
    public function setCloudRegion($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\CloudRegion::class);
        $this->cloud_region = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>repeated .clarifai.api.Nodepool.CapacityType capacity_types = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getCapacityTypes()
    {
        return $this->capacity_types;
    }

    /**
     * Generated from protobuf field <code>repeated .clarifai.api.Nodepool.CapacityType capacity_types = 4;</code>
     * @param array<int>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setCapacityTypes($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::ENUM, \Clarifai\Api\Nodepool\CapacityType::class);
        $this->capacity_types = $arr;

        return $this;
    }

    /**
     *&#47;///////////////////////////////////
     * The instance types that will be available in this pool of nodes.
     * Clarifai offers multiple different choices that combine cpu cores, memory and accelerator.
     *
     * Generated from protobuf field <code>repeated string instance_types = 8;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getInstanceTypes()
    {
        return $this->instance_types;
    }

    /**
     *&#47;///////////////////////////////////
     * The instance types that will be available in this pool of nodes.
     * Clarifai offers multiple different choices that combine cpu cores, memory and accelerator.
     *
     * Generated from protobuf field <code>repeated string instance_types = 8;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setInstanceTypes($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->instance_types = $arr;

        return $this;
    }

    /**
     * Minimum number of instances in this nodepool. This allows the nodeool to scale down to this
     * amount. A nodepool needs a minimum of 1 instance.
     *
     * Generated from protobuf field <code>uint32 min_instances = 9;</code>
     * @return int
     */
    public function getMinInstances()
    {
        return $this->min_instances;
    }

    /**
     * Minimum number of instances in this nodepool. This allows the nodeool to scale down to this
     * amount. A nodepool needs a minimum of 1 instance.
     *
     * Generated from protobuf field <code>uint32 min_instances = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setMinInstances($var)
    {
        GPBUtil::checkUint32($var);
        $this->min_instances = $var;

        return $this;
    }

    /**
     * An upper limit on the number of instances in this nodepool. This allows the nodepool to scale
     * up to this amount.
     *
     * Generated from protobuf field <code>uint32 max_instances = 10;</code>
     * @return int
     */
    public function getMaxInstances()
    {
        return $this->max_instances;
    }

    /**
     * An upper limit on the number of instances in this nodepool. This allows the nodepool to scale
     * up to this amount.
     *
     * Generated from protobuf field <code>uint32 max_instances = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxInstances($var)
    {
        GPBUtil::checkUint32($var);
        $this->max_instances = $var;

        return $this;
    }

}

