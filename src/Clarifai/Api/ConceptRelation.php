<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *&#47;/////////////////////////////////////////////////////////////////////////////
 * Messages from /proto/clarifai/api/concept_graph.proto
 * //////////////////////////////////////////////////////////////////////////////
 * This represents a relation (i.e. edge) between the subject concept and the object concept
 *
 * Generated from protobuf message <code>clarifai.api.ConceptRelation</code>
 */
class ConceptRelation extends \Google\Protobuf\Internal\Message
{
    /**
     * ID of the concept relation
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * The subject concept (i.e. source) of the concept relation
     *
     * Generated from protobuf field <code>.clarifai.api.Concept subject_concept = 2;</code>
     */
    protected $subject_concept = null;
    /**
     * The subject concept (i.e. destination) of the concept relation
     *
     * Generated from protobuf field <code>.clarifai.api.Concept object_concept = 3;</code>
     */
    protected $object_concept = null;
    /**
     * The predicate (i.e. edge) linking the subject and the object
     * Both subject_concept and object_concept are concepts.
     * The predicate is the type of relationship.
     * That predicate acts on the subject.
     * There are three current types of predicates:
     * 1) "hyponym"
     * 2) "hypernym"
     * 3) "synonym"
     * 1) For example, 'hyponym' is a type of predicate which represents 'is_a_kind_of' relation so
     * the following relationship:
     * 'honey' (subject), 'hyponym' (predicate), 'food' (object)
     * Can more easily be read as:
     * 'honey' 'is a kind of' 'food'
     * 2) The 'hypernym' relation is the opposite of 'hyponym' and when you add one of the
     * relationships the opposite will automatically appear for you in queries.
     * The 'hypernym' can be read as 'is a parent of' so:
     * 'food' (subject), 'hypernym' (predicate), 'honey' (object)
     * Can more easily be read as:
     * 'food' is a parent of 'honey'
     * 3) The 'synonym' relation defines two concepts that essential mean the same thing. This
     * is more like a "is" relationship. So for example a 'synonym' relationship could be:
     * "puppy" is "pup"
     * The reverse is also true once the former is added so:
     * "pup" is "puppy"
     * will appear in queries as well.
     *
     * Generated from protobuf field <code>string predicate = 4;</code>
     */
    protected $predicate = '';
    /**
     * The knowledge graph id that this edge belongs to
     *
     * Generated from protobuf field <code>string knowledge_graph_id = 5;</code>
     */
    protected $knowledge_graph_id = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           ID of the concept relation
     *     @type \Clarifai\Api\Concept $subject_concept
     *           The subject concept (i.e. source) of the concept relation
     *     @type \Clarifai\Api\Concept $object_concept
     *           The subject concept (i.e. destination) of the concept relation
     *     @type string $predicate
     *           The predicate (i.e. edge) linking the subject and the object
     *           Both subject_concept and object_concept are concepts.
     *           The predicate is the type of relationship.
     *           That predicate acts on the subject.
     *           There are three current types of predicates:
     *           1) "hyponym"
     *           2) "hypernym"
     *           3) "synonym"
     *           1) For example, 'hyponym' is a type of predicate which represents 'is_a_kind_of' relation so
     *           the following relationship:
     *           'honey' (subject), 'hyponym' (predicate), 'food' (object)
     *           Can more easily be read as:
     *           'honey' 'is a kind of' 'food'
     *           2) The 'hypernym' relation is the opposite of 'hyponym' and when you add one of the
     *           relationships the opposite will automatically appear for you in queries.
     *           The 'hypernym' can be read as 'is a parent of' so:
     *           'food' (subject), 'hypernym' (predicate), 'honey' (object)
     *           Can more easily be read as:
     *           'food' is a parent of 'honey'
     *           3) The 'synonym' relation defines two concepts that essential mean the same thing. This
     *           is more like a "is" relationship. So for example a 'synonym' relationship could be:
     *           "puppy" is "pup"
     *           The reverse is also true once the former is added so:
     *           "pup" is "puppy"
     *           will appear in queries as well.
     *     @type string $knowledge_graph_id
     *           The knowledge graph id that this edge belongs to
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * ID of the concept relation
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * ID of the concept relation
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * The subject concept (i.e. source) of the concept relation
     *
     * Generated from protobuf field <code>.clarifai.api.Concept subject_concept = 2;</code>
     * @return \Clarifai\Api\Concept
     */
    public function getSubjectConcept()
    {
        return $this->subject_concept;
    }

    /**
     * The subject concept (i.e. source) of the concept relation
     *
     * Generated from protobuf field <code>.clarifai.api.Concept subject_concept = 2;</code>
     * @param \Clarifai\Api\Concept $var
     * @return $this
     */
    public function setSubjectConcept($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Concept::class);
        $this->subject_concept = $var;

        return $this;
    }

    /**
     * The subject concept (i.e. destination) of the concept relation
     *
     * Generated from protobuf field <code>.clarifai.api.Concept object_concept = 3;</code>
     * @return \Clarifai\Api\Concept
     */
    public function getObjectConcept()
    {
        return $this->object_concept;
    }

    /**
     * The subject concept (i.e. destination) of the concept relation
     *
     * Generated from protobuf field <code>.clarifai.api.Concept object_concept = 3;</code>
     * @param \Clarifai\Api\Concept $var
     * @return $this
     */
    public function setObjectConcept($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Concept::class);
        $this->object_concept = $var;

        return $this;
    }

    /**
     * The predicate (i.e. edge) linking the subject and the object
     * Both subject_concept and object_concept are concepts.
     * The predicate is the type of relationship.
     * That predicate acts on the subject.
     * There are three current types of predicates:
     * 1) "hyponym"
     * 2) "hypernym"
     * 3) "synonym"
     * 1) For example, 'hyponym' is a type of predicate which represents 'is_a_kind_of' relation so
     * the following relationship:
     * 'honey' (subject), 'hyponym' (predicate), 'food' (object)
     * Can more easily be read as:
     * 'honey' 'is a kind of' 'food'
     * 2) The 'hypernym' relation is the opposite of 'hyponym' and when you add one of the
     * relationships the opposite will automatically appear for you in queries.
     * The 'hypernym' can be read as 'is a parent of' so:
     * 'food' (subject), 'hypernym' (predicate), 'honey' (object)
     * Can more easily be read as:
     * 'food' is a parent of 'honey'
     * 3) The 'synonym' relation defines two concepts that essential mean the same thing. This
     * is more like a "is" relationship. So for example a 'synonym' relationship could be:
     * "puppy" is "pup"
     * The reverse is also true once the former is added so:
     * "pup" is "puppy"
     * will appear in queries as well.
     *
     * Generated from protobuf field <code>string predicate = 4;</code>
     * @return string
     */
    public function getPredicate()
    {
        return $this->predicate;
    }

    /**
     * The predicate (i.e. edge) linking the subject and the object
     * Both subject_concept and object_concept are concepts.
     * The predicate is the type of relationship.
     * That predicate acts on the subject.
     * There are three current types of predicates:
     * 1) "hyponym"
     * 2) "hypernym"
     * 3) "synonym"
     * 1) For example, 'hyponym' is a type of predicate which represents 'is_a_kind_of' relation so
     * the following relationship:
     * 'honey' (subject), 'hyponym' (predicate), 'food' (object)
     * Can more easily be read as:
     * 'honey' 'is a kind of' 'food'
     * 2) The 'hypernym' relation is the opposite of 'hyponym' and when you add one of the
     * relationships the opposite will automatically appear for you in queries.
     * The 'hypernym' can be read as 'is a parent of' so:
     * 'food' (subject), 'hypernym' (predicate), 'honey' (object)
     * Can more easily be read as:
     * 'food' is a parent of 'honey'
     * 3) The 'synonym' relation defines two concepts that essential mean the same thing. This
     * is more like a "is" relationship. So for example a 'synonym' relationship could be:
     * "puppy" is "pup"
     * The reverse is also true once the former is added so:
     * "pup" is "puppy"
     * will appear in queries as well.
     *
     * Generated from protobuf field <code>string predicate = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setPredicate($var)
    {
        GPBUtil::checkString($var, True);
        $this->predicate = $var;

        return $this;
    }

    /**
     * The knowledge graph id that this edge belongs to
     *
     * Generated from protobuf field <code>string knowledge_graph_id = 5;</code>
     * @return string
     */
    public function getKnowledgeGraphId()
    {
        return $this->knowledge_graph_id;
    }

    /**
     * The knowledge graph id that this edge belongs to
     *
     * Generated from protobuf field <code>string knowledge_graph_id = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setKnowledgeGraphId($var)
    {
        GPBUtil::checkString($var, True);
        $this->knowledge_graph_id = $var;

        return $this;
    }

}

