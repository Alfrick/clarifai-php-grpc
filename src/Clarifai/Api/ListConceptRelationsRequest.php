<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/service.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *&#47;/////////////////////////////////////////////////////////////////////////////
 * Requests / Responses from /proto/clarifai/api/concept_graph.proto
 * //////////////////////////////////////////////////////////////////////////////
 * ////////////////////
 * Responses
 * ////////////////////
 * Requests
 * ////////////////////
 * GET all relations such that the concept_id refers to the subject of the relation
 *
 * Generated from protobuf message <code>clarifai.api.ListConceptRelationsRequest</code>
 */
class ListConceptRelationsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The user_id and app_id information.
     *
     * Generated from protobuf field <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
     */
    protected $user_app_id = null;
    /**
     * The subject concept id in your app to get all the relationships for.
     *
     * Generated from protobuf field <code>string concept_id = 2;</code>
     */
    protected $concept_id = '';
    /**
     * This is part of the url so we can extend to multiple link types in the future.
     * Valid predicates are:
     * 'hypernyms'
     * 'hyponyms'
     *
     * Generated from protobuf field <code>string predicate = 3;</code>
     */
    protected $predicate = '';
    /**
     * This identifies the subgraph you want to search over, if any.
     *
     * Generated from protobuf field <code>string knowledge_graph_id = 4;</code>
     */
    protected $knowledge_graph_id = '';
    /**
     * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
     * Defaults to 1.
     *
     * Generated from protobuf field <code>uint32 page = 5;</code>
     */
    protected $page = 0;
    /**
     * (optional URL parameter) The number of results that will be contained in each page. Defaults
     * to 10.
     *
     * Generated from protobuf field <code>uint32 per_page = 6;</code>
     */
    protected $per_page = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Clarifai\Api\UserAppIDSet $user_app_id
     *           The user_id and app_id information.
     *     @type string $concept_id
     *           The subject concept id in your app to get all the relationships for.
     *     @type string $predicate
     *           This is part of the url so we can extend to multiple link types in the future.
     *           Valid predicates are:
     *           'hypernyms'
     *           'hyponyms'
     *     @type string $knowledge_graph_id
     *           This identifies the subgraph you want to search over, if any.
     *     @type int $page
     *           (optional URL parameter) The page number. Pagination is used to split the results into chunks.
     *           Defaults to 1.
     *     @type int $per_page
     *           (optional URL parameter) The number of results that will be contained in each page. Defaults
     *           to 10.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Service::initOnce();
        parent::__construct($data);
    }

    /**
     * The user_id and app_id information.
     *
     * Generated from protobuf field <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
     * @return \Clarifai\Api\UserAppIDSet
     */
    public function getUserAppId()
    {
        return $this->user_app_id;
    }

    /**
     * The user_id and app_id information.
     *
     * Generated from protobuf field <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
     * @param \Clarifai\Api\UserAppIDSet $var
     * @return $this
     */
    public function setUserAppId($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\UserAppIDSet::class);
        $this->user_app_id = $var;

        return $this;
    }

    /**
     * The subject concept id in your app to get all the relationships for.
     *
     * Generated from protobuf field <code>string concept_id = 2;</code>
     * @return string
     */
    public function getConceptId()
    {
        return $this->concept_id;
    }

    /**
     * The subject concept id in your app to get all the relationships for.
     *
     * Generated from protobuf field <code>string concept_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setConceptId($var)
    {
        GPBUtil::checkString($var, True);
        $this->concept_id = $var;

        return $this;
    }

    /**
     * This is part of the url so we can extend to multiple link types in the future.
     * Valid predicates are:
     * 'hypernyms'
     * 'hyponyms'
     *
     * Generated from protobuf field <code>string predicate = 3;</code>
     * @return string
     */
    public function getPredicate()
    {
        return $this->predicate;
    }

    /**
     * This is part of the url so we can extend to multiple link types in the future.
     * Valid predicates are:
     * 'hypernyms'
     * 'hyponyms'
     *
     * Generated from protobuf field <code>string predicate = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setPredicate($var)
    {
        GPBUtil::checkString($var, True);
        $this->predicate = $var;

        return $this;
    }

    /**
     * This identifies the subgraph you want to search over, if any.
     *
     * Generated from protobuf field <code>string knowledge_graph_id = 4;</code>
     * @return string
     */
    public function getKnowledgeGraphId()
    {
        return $this->knowledge_graph_id;
    }

    /**
     * This identifies the subgraph you want to search over, if any.
     *
     * Generated from protobuf field <code>string knowledge_graph_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setKnowledgeGraphId($var)
    {
        GPBUtil::checkString($var, True);
        $this->knowledge_graph_id = $var;

        return $this;
    }

    /**
     * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
     * Defaults to 1.
     *
     * Generated from protobuf field <code>uint32 page = 5;</code>
     * @return int
     */
    public function getPage()
    {
        return $this->page;
    }

    /**
     * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
     * Defaults to 1.
     *
     * Generated from protobuf field <code>uint32 page = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setPage($var)
    {
        GPBUtil::checkUint32($var);
        $this->page = $var;

        return $this;
    }

    /**
     * (optional URL parameter) The number of results that will be contained in each page. Defaults
     * to 10.
     *
     * Generated from protobuf field <code>uint32 per_page = 6;</code>
     * @return int
     */
    public function getPerPage()
    {
        return $this->per_page;
    }

    /**
     * (optional URL parameter) The number of results that will be contained in each page. Defaults
     * to 10.
     *
     * Generated from protobuf field <code>uint32 per_page = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setPerPage($var)
    {
        GPBUtil::checkUint32($var);
        $this->per_page = $var;

        return $this;
    }

}

